package com.nju.va.technicalstatistics.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nju.va.technicalstatistics.info.Team;

import com.nju.va.technicalstatistics.info.Point;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT".
*/
public class PointDao extends AbstractDao<Point, Integer> {

    public static final String TABLENAME = "POINT";

    /**
     * Properties of entity Point.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PointId = new Property(0, int.class, "pointId", true, "POINT_ID");
        public final static Property GameId = new Property(1, int.class, "gameId", false, "GAME_ID");
        public final static Property PointNo = new Property(2, int.class, "pointNo", false, "POINT_NO");
        public final static Property Positive = new Property(3, boolean.class, "positive", false, "POSITIVE");
        public final static Property Method = new Property(4, String.class, "method", false, "METHOD");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property Winner = new Property(6, Integer.class, "winner", false, "WINNER");
    }

    private DaoSession daoSession;

    private Query<Point> game_LeftPointsQuery;
    private Query<Point> game_RightPointsQuery;

    public PointDao(DaoConfig config) {
        super(config);
    }
    
    public PointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT\" (" + //
                "\"POINT_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: pointId
                "\"GAME_ID\" INTEGER NOT NULL ," + // 1: gameId
                "\"POINT_NO\" INTEGER NOT NULL ," + // 2: pointNo
                "\"POSITIVE\" INTEGER NOT NULL ," + // 3: positive
                "\"METHOD\" TEXT," + // 4: method
                "\"REMARK\" TEXT," + // 5: remark
                "\"WINNER\" INTEGER);"); // 6: winner
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Point entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPointId());
        stmt.bindLong(2, entity.getGameId());
        stmt.bindLong(3, entity.getPointNo());
        stmt.bindLong(4, entity.getPositive() ? 1L: 0L);
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(5, method);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Point entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPointId());
        stmt.bindLong(2, entity.getGameId());
        stmt.bindLong(3, entity.getPointNo());
        stmt.bindLong(4, entity.getPositive() ? 1L: 0L);
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(5, method);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
    }

    @Override
    protected final void attachEntity(Point entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Point readEntity(Cursor cursor, int offset) {
        Point entity = new Point( //
            cursor.getInt(offset + 0), // pointId
            cursor.getInt(offset + 1), // gameId
            cursor.getInt(offset + 2), // pointNo
            cursor.getShort(offset + 3) != 0, // positive
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // method
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Point entity, int offset) {
        entity.setPointId(cursor.getInt(offset + 0));
        entity.setGameId(cursor.getInt(offset + 1));
        entity.setPointNo(cursor.getInt(offset + 2));
        entity.setPositive(cursor.getShort(offset + 3) != 0);
        entity.setMethod(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Point entity, long rowId) {
        return entity.getPointId();
    }
    
    @Override
    public Integer getKey(Point entity) {
        if(entity != null) {
            return entity.getPointId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Point entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "leftPoints" to-many relationship of Game. */
    public List<Point> _queryGame_LeftPoints(int gameId) {
        synchronized (this) {
            if (game_LeftPointsQuery == null) {
                QueryBuilder<Point> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GameId.eq(null));
                game_LeftPointsQuery = queryBuilder.build();
            }
        }
        Query<Point> query = game_LeftPointsQuery.forCurrentThread();
        query.setParameter(0, gameId);
        return query.list();
    }

    /** Internal query to resolve the "rightPoints" to-many relationship of Game. */
    public List<Point> _queryGame_RightPoints(int gameId) {
        synchronized (this) {
            if (game_RightPointsQuery == null) {
                QueryBuilder<Point> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GameId.eq(null));
                game_RightPointsQuery = queryBuilder.build();
            }
        }
        Query<Point> query = game_RightPointsQuery.forCurrentThread();
        query.setParameter(0, gameId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTeamDao().getAllColumns());
            builder.append(" FROM POINT T");
            builder.append(" LEFT JOIN TEAM T0 ON T.\"WINNER\"=T0.\"TEAM_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Point loadCurrentDeep(Cursor cursor, boolean lock) {
        Point entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Team winner = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
        entity.setWinner(winner);

        return entity;    
    }

    public Point loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Point> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Point> list = new ArrayList<Point>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Point> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Point> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
