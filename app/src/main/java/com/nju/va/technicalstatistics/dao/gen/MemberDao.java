package com.nju.va.technicalstatistics.dao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nju.va.technicalstatistics.info.Member;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER".
*/
public class MemberDao extends AbstractDao<Member, Void> {

    public static final String TABLENAME = "MEMBER";

    /**
     * Properties of entity Member.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TeamId = new Property(0, int.class, "teamId", true, "TEAM_ID");
        public final static Property Number = new Property(1, int.class, "number", true, "NUMBER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Position = new Property(3, int.class, "position", false, "POSITION");
    }

    private Query<Member> team_MembersQuery;

    public MemberDao(DaoConfig config) {
        super(config);
    }
    
    public MemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER\" (" + //
                "\"TEAM_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: teamId
                "\"NUMBER\" INTEGER PRIMARY KEY NOT NULL ," + // 1: number
                "\"NAME\" TEXT," + // 2: name
                "\"POSITION\" INTEGER NOT NULL );"); // 3: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Member entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTeamId());
        stmt.bindLong(2, entity.getNumber());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Member entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTeamId());
        stmt.bindLong(2, entity.getNumber());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getPosition());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Member readEntity(Cursor cursor, int offset) {
        Member entity = new Member( //
            cursor.getInt(offset + 0), // teamId
            cursor.getInt(offset + 1), // number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Member entity, int offset) {
        entity.setTeamId(cursor.getInt(offset + 0));
        entity.setNumber(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPosition(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Member entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Member entity) {
        return null;
    }

    @Override
    public boolean hasKey(Member entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "members" to-many relationship of Team. */
    public List<Member> _queryTeam_Members(int teamId) {
        synchronized (this) {
            if (team_MembersQuery == null) {
                QueryBuilder<Member> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TeamId.eq(null));
                team_MembersQuery = queryBuilder.build();
            }
        }
        Query<Member> query = team_MembersQuery.forCurrentThread();
        query.setParameter(0, teamId);
        return query.list();
    }

}
