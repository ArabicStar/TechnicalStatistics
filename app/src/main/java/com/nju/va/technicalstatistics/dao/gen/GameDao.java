package com.nju.va.technicalstatistics.dao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nju.va.technicalstatistics.info.Game;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME".
*/
public class GameDao extends AbstractDao<Game, Integer> {

    public static final String TABLENAME = "GAME";

    /**
     * Properties of entity Game.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GameId = new Property(0, int.class, "gameId", true, "GAME_ID");
        public final static Property MatchId = new Property(1, int.class, "matchId", false, "MATCH_ID");
        public final static Property GameNo = new Property(2, int.class, "gameNo", false, "GAME_NO");
        public final static Property Finish = new Property(3, boolean.class, "finish", false, "FINISH");
    }

    private DaoSession daoSession;

    private Query<Game> match_GamesQuery;

    public GameDao(DaoConfig config) {
        super(config);
    }
    
    public GameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME\" (" + //
                "\"GAME_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: gameId
                "\"MATCH_ID\" INTEGER NOT NULL ," + // 1: matchId
                "\"GAME_NO\" INTEGER NOT NULL ," + // 2: gameNo
                "\"FINISH\" INTEGER NOT NULL );"); // 3: finish
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Game entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGameId());
        stmt.bindLong(2, entity.getMatchId());
        stmt.bindLong(3, entity.getGameNo());
        stmt.bindLong(4, entity.getFinish() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Game entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGameId());
        stmt.bindLong(2, entity.getMatchId());
        stmt.bindLong(3, entity.getGameNo());
        stmt.bindLong(4, entity.getFinish() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(Game entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Game readEntity(Cursor cursor, int offset) {
        Game entity = new Game( //
            cursor.getInt(offset + 0), // gameId
            cursor.getInt(offset + 1), // matchId
            cursor.getInt(offset + 2), // gameNo
            cursor.getShort(offset + 3) != 0 // finish
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Game entity, int offset) {
        entity.setGameId(cursor.getInt(offset + 0));
        entity.setMatchId(cursor.getInt(offset + 1));
        entity.setGameNo(cursor.getInt(offset + 2));
        entity.setFinish(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Game entity, long rowId) {
        return entity.getGameId();
    }
    
    @Override
    public Integer getKey(Game entity) {
        if(entity != null) {
            return entity.getGameId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Game entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "games" to-many relationship of Match. */
    public List<Game> _queryMatch_Games(int matchId) {
        synchronized (this) {
            if (match_GamesQuery == null) {
                QueryBuilder<Game> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MatchId.eq(null));
                match_GamesQuery = queryBuilder.build();
            }
        }
        Query<Game> query = match_GamesQuery.forCurrentThread();
        query.setParameter(0, matchId);
        return query.list();
    }

}
