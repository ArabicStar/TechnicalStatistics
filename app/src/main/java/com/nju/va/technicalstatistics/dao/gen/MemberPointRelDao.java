package com.nju.va.technicalstatistics.dao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nju.va.technicalstatistics.info.MemberPointRel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER_POINT_REL".
*/
public class MemberPointRelDao extends AbstractDao<MemberPointRel, Void> {

    public static final String TABLENAME = "MEMBER_POINT_REL";

    /**
     * Properties of entity MemberPointRel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MemberId = new Property(0, int.class, "memberId", true, "MEMBER_ID");
        public final static Property PointId = new Property(1, int.class, "pointId", true, "POINT_ID");
    }

    private Query<MemberPointRel> point_MembersQuery;

    public MemberPointRelDao(DaoConfig config) {
        super(config);
    }
    
    public MemberPointRelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER_POINT_REL\" (" + //
                "\"MEMBER_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: memberId
                "\"POINT_ID\" INTEGER PRIMARY KEY NOT NULL );"); // 1: pointId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER_POINT_REL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemberPointRel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMemberId());
        stmt.bindLong(2, entity.getPointId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemberPointRel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMemberId());
        stmt.bindLong(2, entity.getPointId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MemberPointRel readEntity(Cursor cursor, int offset) {
        MemberPointRel entity = new MemberPointRel( //
            cursor.getInt(offset + 0), // memberId
            cursor.getInt(offset + 1) // pointId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemberPointRel entity, int offset) {
        entity.setMemberId(cursor.getInt(offset + 0));
        entity.setPointId(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MemberPointRel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MemberPointRel entity) {
        return null;
    }

    @Override
    public boolean hasKey(MemberPointRel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "members" to-many relationship of Point. */
    public List<MemberPointRel> _queryPoint_Members(int pointId) {
        synchronized (this) {
            if (point_MembersQuery == null) {
                QueryBuilder<MemberPointRel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PointId.eq(null));
                point_MembersQuery = queryBuilder.build();
            }
        }
        Query<MemberPointRel> query = point_MembersQuery.forCurrentThread();
        query.setParameter(0, pointId);
        return query.list();
    }

}
