package com.nju.va.technicalstatistics.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nju.va.technicalstatistics.info.Team;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEAM".
*/
public class TeamDao extends AbstractDao<Team, Integer> {

    public static final String TABLENAME = "TEAM";

    /**
     * Properties of entity Team.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TeamId = new Property(0, int.class, "teamId", true, "TEAM_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ImgPath = new Property(2, String.class, "imgPath", false, "IMG_PATH");
        public final static Property Valid = new Property(3, boolean.class, "valid", false, "VALID");
    }

    private DaoSession daoSession;


    public TeamDao(DaoConfig config) {
        super(config);
    }
    
    public TeamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEAM\" (" + //
                "\"TEAM_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: teamId
                "\"NAME\" TEXT," + // 1: name
                "\"IMG_PATH\" TEXT," + // 2: imgPath
                "\"VALID\" INTEGER NOT NULL );"); // 3: valid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Team entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTeamId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(3, imgPath);
        }
        stmt.bindLong(4, entity.getValid() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Team entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTeamId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(3, imgPath);
        }
        stmt.bindLong(4, entity.getValid() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(Team entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Team readEntity(Cursor cursor, int offset) {
        Team entity = new Team( //
            cursor.getInt(offset + 0), // teamId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imgPath
            cursor.getShort(offset + 3) != 0 // valid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Team entity, int offset) {
        entity.setTeamId(cursor.getInt(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImgPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValid(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Team entity, long rowId) {
        return entity.getTeamId();
    }
    
    @Override
    public Integer getKey(Team entity) {
        if(entity != null) {
            return entity.getTeamId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Team entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
